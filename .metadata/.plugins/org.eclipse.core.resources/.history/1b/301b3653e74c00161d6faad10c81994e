package launcher;

import java.util.Arrays;
import java.util.Properties;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;

public class FutureTest {
	public static void main(String[] args) {
		
		
		while(true) {
			CompletableFuture<String> cf = CompletableFuture.supplyAsync(new messageSupplier());
			cf.thenAccept(message -> System.out.println(message));
			cf.join();
		}
	}
	
	private static void publishMessage() {
		Properties props = new Properties();
		props.put("bootstrap.servers", "localhost:9092");
		props.put("acks", "all");
		props.put("retries", 0);
		props.put("batch.size", 16384);
		props.put("linger.ms", 0);
		props.put("buffer.memory", 33554432);
		props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
		props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");
		KafkaProducer<String, String> producer = new KafkaProducer<String, String>(props);

/*		String zookeeperConnect = "localhost:2181";
		boolean isSecureKafkaCluster = false;
	    int partitions = 1;
	    int replication = 1;*/
	    		
		/*ZkClient zkClient = new ZkClient("localhost:2181", 10000, 10000, ZKStringSerializer$.MODULE$);
		ZkUtils zkUtils = new ZkUtils(zkClient, new ZkConnection(zookeeperConnect), isSecureKafkaCluster);
		try{
			AdminUtils.createTopic(zkUtils, userId, partitions, replication, new Properties(),null);
		}
		catch(TopicExistsException ex){
			System.out.println("Topic Exists");
		}*/
		
		ProducerRecord<String, String> data = new ProducerRecord<String, String>(userId, message);
		try {
			producer.send(data);
			producer.close();
			return true;
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}
	}
	
	private static class messageSupplier implements Supplier<String>{
		@Override
		public String get() {
			Properties properties = new Properties();
			properties.put("bootstrap.servers", "localhost:9092");
			 properties.put("acks", "all");
	         properties.put("retries", 0);
	         properties.put("batch.size", 16384);
	         properties.put("buffer.memory", 33554432);
	         properties.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
	         properties.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
	         properties.put("block.on.buffer.full",true);
	         properties.put("group.id", "hazem");
	     	final KafkaConsumer<String, String> consumer=new KafkaConsumer<>(properties);
			try {
				consumer.subscribe(Arrays.asList("uidtest"));
				while(true) {
					ConsumerRecords<String, String> records = consumer.poll(1000000);
					for (ConsumerRecord<String, String> record : records) {
						return record.value();
					}
				}
			} 
			catch(Exception e){
				e.printStackTrace();
			}
			finally {
				consumer.close();
			}
			return "";
		}
	}
}
