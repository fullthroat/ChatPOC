package com.lollibond.chat.broker;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.lollibond.chat.domain.Message;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;

public class ProducerWorker {

	public static void publishToKafka(String userName, String message) {

		try {

			  HttpClient client = new DefaultHttpClient();
			  HttpPost post = new HttpPost("http://localhost:8080/company/publish");
			  Message msg=new Message();
				msg.setMessage(message);
				msg.setTopic(userName);
				ObjectMapper mapper=new ObjectMapper();
				String str=mapper.writeValueAsString(msg);
				
			  StringEntity input = new StringEntity(str);
			  post.setEntity(input);
			 
			  HttpResponse response = client.execute(post);
			  BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
			  String line = "" ;
			  while ((line = rd.readLine()) != null) {
			   System.out.println(line);
			  }

			if (response.getStatusLine().getStatusCode()!=200) {
				System.out.println(response.getStatusLine().getStatusCode());
			}

		} catch (Exception e) {

			e.printStackTrace();

		} 
	}

}
