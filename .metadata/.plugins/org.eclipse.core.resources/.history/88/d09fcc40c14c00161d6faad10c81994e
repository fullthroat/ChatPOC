package com.lollibond.chat.broker;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import org.apache.http.HttpHeaders;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.lollibond.chat.domain.Message;

public class ConsumerWorker {

	public static Message subscribeMessage(String userId) {
		Message message=new Message();
		try {
			
			URL url = new URL("http://localhost:8090/consumer/getMessage");
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setDoOutput(true);
			conn.setRequestMethod("POST");
			conn.setRequestProperty("Content-Type", "application/json");
			OutputStream os = conn.getOutputStream();
			os.write(userId.getBytes());
			os.flush();

			if (conn.getResponseCode() != HttpURLConnection.HTTP_CREATED) {
				throw new RuntimeException("Failed : HTTP error code : " + conn.getResponseCode());
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));

			String output;
			System.out.println("Output from Server .... \n");
			while ((output = br.readLine()) != null) {
				System.out.println(output);
				message.setMessage(output);
				message.setTopic(userId);
			}

			conn.disconnect();
			return message;

		} catch (MalformedURLException e) {
			
			e.printStackTrace();
			return message;
		} catch (IOException e) {
			
			e.printStackTrace();
			return message;
		}
	}

	public static void subscribeMessage2(String userId){
		try {

			CloseableHttpClient client = HttpClients.createDefault();
			  HttpPost post = new HttpPost("http://localhost:8080/company/publish");
			  Message msg=new Message();
				msg.setMessage(message);
				msg.setTopic(userName);
				ObjectMapper mapper=new ObjectMapper();
				String str=mapper.writeValueAsString(msg);
			  post.setHeader(HttpHeaders.CONTENT_TYPE,"application/json");	
			  StringEntity input = new StringEntity(str);
			  post.setEntity(input);
			 
			  CloseableHttpResponse response = client.execute(post);
			  response.setHeader(HttpHeaders.CONTENT_TYPE,"application/json");
			  BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
			  String line = "" ;
			  while ((line = rd.readLine()) != null) {
			   System.out.println(line);
			  }

			if (response.getStatusLine().getStatusCode()!=200) {
				System.out.println(response.getStatusLine().getStatusCode());
			}
			client.close();
			response.close();
		} catch (Exception e) {

			e.printStackTrace();

		} 
	}
	
	
}
