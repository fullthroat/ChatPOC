package launcher;

import java.util.Arrays;
import java.util.Properties;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;

public class FutureTest {
	public static void main(String[] args) {
		CompletableFuture<String> cf = CompletableFuture.supplyAsync(new Supplier<String>() {
			@Override
			public String get() {
				Properties properties = new Properties();
				properties.put("bootstrap.servers", "localhost:9092");
				 properties.put("acks", "all");
		         properties.put("retries", 0);
		         properties.put("batch.size", 16384);
		         properties.put("buffer.memory", 33554432);
		         properties.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		         properties.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		         properties.put("block.on.buffer.full",true);
		         properties.put("group.id", "lolligrasp");
		     	final KafkaConsumer<String, String> consumer=new KafkaConsumer<>(properties);
				try {
					consumer.subscribe(Arrays.asList("uidtest"));
					while(true) {
						ConsumerRecords<String, String> records = consumer.poll(100000);
						for (ConsumerRecord<String, String> record : records) {
							return record.value();
						}
					}
				} 
				catch(Exception e){
					e.printStackTrace();
				}
				finally {
					consumer.close();
				}
				return "";
			}
		});
		
		cf.thenAccept(message -> System.out.println(message));
		
		cf.join();
	}
	
	private static class messageSupplier implements Supplier<String>{
		
	}
}
