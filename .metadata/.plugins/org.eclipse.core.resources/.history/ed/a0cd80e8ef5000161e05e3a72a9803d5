package com.corundumstudio.socketio.demo;

import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;

import com.corundumstudio.socketio.AckRequest;
import com.corundumstudio.socketio.Configuration;
import com.corundumstudio.socketio.SocketIOClient;
import com.corundumstudio.socketio.SocketIOServer;
import com.corundumstudio.socketio.listener.ConnectListener;
import com.corundumstudio.socketio.listener.DataListener;
import com.corundumstudio.socketio.listener.DisconnectListener;
import com.lollibond.chat.generic.ChatPayload;
import com.lollibond.chat.generic.RegisterPayload;

public class DynamicChatServer {

	// For storing uuid's as client reference
	private static final Map<String, SocketIOClient> clientMap = new HashMap<String, SocketIOClient>();

	private static KafkaProducer<String, String> kafkaProducer;

	private static Map<String, SocketIOClient> clMap = ClientDocker.getClientmap();
	
	private int i=0;

	public static void main(String args[]) throws InterruptedException {

		
		try {
			final int numberOfThreads = 4;

			Properties producerProperties = new Properties();
			producerProperties.put("bootstrap.servers", "localhost:9092");
			producerProperties.put("acks", "all");
			producerProperties.put("retries", "0");
			producerProperties.put("batch.size", 16384);
			producerProperties.put("linger.ms", 0);
			producerProperties.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
			producerProperties.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");

			kafkaProducer = new KafkaProducer<String, String>(producerProperties);

			Configuration config = new Configuration();
			config.setHostname("localhost");
			config.setPort(5054);

			final SocketIOServer server = new SocketIOServer(config);
			ConsumerWorker consumerWorker[] = new ConsumerWorker[4];
			for (int i = 0; i < numberOfThreads; i++) {
				consumerWorker[i] = new ConsumerWorker();
				consumerWorker[i].start();
			}

			/*
			 * server.addEventListener("chatevent", ChatPayload.class, new
			 * DataListener<ChatPayload>() {
			 * 
			 * @Override public void onData(SocketIOClient client, ChatPayload
			 * data, AckRequest ackRequest) { // broadcast messages to all
			 * clients server.getBroadcastOperations().sendEvent("chatevent",
			 * data); registerMap.put(data.getUserName(), client); } });
			 */

			server.addEventListener("register", RegisterPayload.class, new DataListener<RegisterPayload>() {
				int k;
				@Override
				public void onData(SocketIOClient client, RegisterPayload data, AckRequest ackRequest) {
					System.out.println("Connection Request Revieved, Connection number is now"+ k++);
					long userName = Long.parseLong(data.getUsername());
					long consumerLength = consumerWorker.length;
					int threadId = (int) (userName % consumerLength);
					if (data.getUsername().contains("notification")) {
						consumerWorker[threadId].getAssignedMap().put(data.getUsername(), client);
						consumerWorker[threadId].getShouldSubscribe().set(true);
						return;
					}
					consumerWorker[threadId].getAssignedMap().put(data.getUsername(), client);
					consumerWorker[threadId].getShouldSubscribe().set(true);

				}
			});

			server.addEventListener("unloadclient", RegisterPayload.class, new DataListener<RegisterPayload>() {
				@Override
				public void onData(SocketIOClient client, RegisterPayload data, AckRequest ackRequest) {
					if (data.getUsername().contains("notification")) {
						clMap.put(data.getUsername(), client);
						return;
					}
					clMap.put(data.getUsername(), client);

				}
			});

			server.addConnectListener(new ConnectListener() {
				@Override
				public void onConnect(SocketIOClient client) {
					clientMap.put(client.getSessionId().toString(), client);
				}
			});

			server.addDisconnectListener(new DisconnectListener() {
				@Override
				public void onDisconnect(SocketIOClient client) {
					clientMap.remove(client.getSessionId().toString());
				}
			});

			server.addEventListener("sendmsgtouser", ChatPayload.class, new DataListener<ChatPayload>() {
				@Override
				public void onData(SocketIOClient client, ChatPayload data, AckRequest ackRequest) {

					ProducerRecord<String, String> producerRecord = new ProducerRecord<String, String>(data.getToUser(),
							data.getMessage());
					kafkaProducer.send(producerRecord);

				}
			});

			/*
			 * server.addEventListener("notification",
			 * NotificationsPayload.class, new
			 * DataListener<NotificationsPayload>() {
			 * 
			 * @Override public void onData(SocketIOClient client,
			 * NotificationsPayload data, AckRequest ackRequest) {
			 * SocketIOClient toUser = notificationMap.get(data.getTempnuid());
			 * if (toUser != null) { toUser.sendEvent("notification", data);
			 * 
			 * } } });
			 */

			server.start();

			while (true) {

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	private static void countConnections(){

		System.out.println();
	}

	/*
	 * public static Map<String, SocketIOClient> getLeastLoadMap() {
	 * 
	 * Map<ConsumerWorker, Map> map = ClientDocker.getMapstore(); Map<Integer,
	 * Map> idMap = new HashMap<Integer, Map>(); int lengthArray[];
	 * Iterator<Map> iter = map.values().iterator(); while (iter.hasNext()) {
	 * Map mp = iter.next(); idMap.put(mp.size(), mp); } idMap.keySet();
	 * 
	 * 
	 * return null; }
	 */

}
